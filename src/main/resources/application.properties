# debug : true => 스프링부트 기동시 디버그 확인 가능
debug=false
management.endpoints.web.exposure.include=*
server.error.whitelabel.enabled=false

# logging.level.??? 를 하면 원하는 패키지의 로깅을 할 수 있다.
logging.level.com.dean.getinline=debug
logging.level.org.springframework.web.servlet=debug
# log에서 하이버네이트(JPA 구현체)가 작성하는 로그. 쿼리에 파라미터의 경우 ? 로 찍히는데 해당 파라미터도 노출시킨다.
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

# View
spring.thymeleaf.cache=false
spring.custom.thymeleaf.decoupled-logic=true

# Database
# defer-datasource-initialization는 하이버네이트에서 실행시키기 위해선 필수 값이다.
spring.jpa.defer-datasource-initialization=true
# Entity 정보를 create ddl을 항상 실행시킨다.
spring.jpa.hibernate.ddl-auto=create-drop
# 로그에 sql을 노출 시키기 위해 추가
spring.jpa.show-sql=true
# sql 로그의 formating를 넣기 위해 추가
spring.jpa.properties.hibernate.format_sql=true

# API
spring.data.rest.base-path=/api


#=====
#spring.mvc.format.date-time=yyyy-MM-dd HH:mm:ss # 전역의 date-time을 설정 할 수 있다.
#spring.profiles.active=alpha