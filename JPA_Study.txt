* JPA?

ORM / JPA / JPQL

1. ORM (Object Relational Mapping)
- 객체지향 언어를 이용해 서로 호환되지 않는 타입 간의 데이터를 변환하는 기술
    > RDBMS 테이블의 데이터를 자바 객체와 매핑하는 기술
    > RDBMS를 객체지향 DB로 가상화
    > ORM 으로 얻고자 하는 것
        1. DB 추상화 가능
        2. 객체간 참조, type-safety
        3. DB코드 작성 최소화

2. JPA (Jakarta[java] Persistence API)
- 자바에서 ORM 기술을 사용해 RDBMS를 다루기 위한 인터페이스 표준 명세
    > 기본적으로 관계형 DB의 영속성(persistence)만을 규정
    > 스프링부트 2.x의 경우 패키지 명 javax.persistence.*
    > 3.x의 경우 jakarta.persistence.*
            == 스프링 부트 3.0 이상 >>> 스프링 부트: 3.0.0, 자바: 17 기준 ==
            implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
            annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
            annotationProcessor "jakarta.annotation:jakarta.annotation-api"
            annotationProcessor "jakarta.persistence:jakarta.persistence-api"

            // 스프링부트 2.x 버전인 경우 다음과 같이 설정
            implementation "com.querydsl:querydsl-jpa"
            implementation "com.querydsl:querydsl-core"
            implementation "com.querydsl:querydsl-collections"
            annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
            annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

- Persistence (영속성) -> 비휘발성 데이터의 경우 영속성이 있다고 표현한다.
    > 프로세스가 만든 시스템의 상태가 종료된 후에도 사라지지 않는 특성
    > 영속성 프레임 워크 : 영속성을 관리하는 부분을 persistence layer로 추상화 하고
        이를 전담하는 프레임워크에게 관리를 위임
    > JPA에서 persistence란?
        프로세스가 DB로부터 읽거나 DB에 저장한 정보의 특성

3. JPQL (Jakarta Persistence Query Language)
- 플랫폼으로부터 독립적인 객체지향 쿼리 언어
    > RDBMS의 엔티티를 다루는 쿼리를 만드는데 사용
- JPQL을 직접 사용하고 있다면, 반드시 필요했던 일인지 검토하기
